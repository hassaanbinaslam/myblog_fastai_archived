{
  
    
        "post0": {
            "title": "Python - Getting more information from Tracebacks",
            "content": "About . This notebook demonstrates what the Python Traceback object is, and how can we get more information out of it to better diagnose exception messages. . Credit . This blog post is based on an article originally written in Python Cookbook published by O&#39;Reilly Media, Inc. and released July 2002. In book&#39;s chapter 15, there is a section with the title Getting More Information from Tracebacks written by Bryn Keller. An online version of this article is available at https://www.oreilly.com/library/view/python-cookbook/0596001673/ch14s05.html. . The original article uses Python 2.2, but I have adapted it for Python 3.8. Also, I have added some commentary to give more insights on Python Traceback object. . Environment Details . from platform import python_version print(&quot;python==&quot; + python_version()) . . python==3.8.5 . Discussion . Consider the following toy example where we are getting some data from an external source (an API call, a DB call, etc.), and we need to find the length of individual items provided in the list. We know that items in the list will be of type str so we have used a len() function on it. . We got an exception when we ran our function on received data, and now we are trying to investigate what caused the error. . # this is intentionally hidden as we don&#39;t know about the data received from an external source. data = [&quot;1&quot;, &quot;22&quot;, 333, &quot;4444&quot;] . . # our toy example function. import sys, traceback def get_items_len(items: list) -&gt; list: &quot;&quot;&quot; this function returns the length of items received in a list. &quot;&quot;&quot; items_len = [] for i in items: items_len.append(len(i)) return items_len . # let&#39;s run our function on &quot;data&quot; received from an external source try: get_items_len(data) except Exception as e: print(traceback.print_exc()) . None . Traceback (most recent call last): File &#34;&lt;ipython-input-4-42cd486e1858&gt;&#34;, line 4, in &lt;module&gt; get_items_len(data) File &#34;&lt;ipython-input-3-8421f841ba77&gt;&#34;, line 11, in get_items_len items_len.append(len(i)) TypeError: object of type &#39;int&#39; has no len() . We got an exception while data processing and the Traceback message gives us some details. It tells us that we have received some data of type integer instead of string, and we are trying to call len() function on it. But we don&#39;t know the actual data value that caused the exception, or we don&#39;t know the index of the item in the list that caused this error. Depending on the use case, information about the local variables, or input data that caused the error can be crucial in diagnosing the root cause of an error. . Fortunately, all this information is already available to us in the &#39;Traceback&#39; object, but there are no built-in methods that give this information directly. Let us try some of the built-in methods on the Traceback object to see the kind of information we could get from it. . # calling traceback module built-in methods try: get_items_len(data) except Exception as e: print(&quot;***** Exception *****&quot;) print(e) exc_type, exc_value, exc_traceback = sys.exc_info() print(&quot; n***** print_tb *****&quot;) traceback.print_tb(exc_traceback, limit=1, file=sys.stdout) print(&quot; n***** print_exception *****&quot;) # exc_type below is ignored on 3.5 and later traceback.print_exception(exc_type, exc_value, exc_traceback, limit=2, file=sys.stdout) print(&quot; n***** print_exc *****&quot;) traceback.print_exc(limit=2, file=sys.stdout) print(&quot; n***** format_exc, first and last line *****&quot;) formatted_lines = traceback.format_exc().splitlines() print(formatted_lines[0]) print(formatted_lines[-1]) print(&quot; n***** format_exception *****&quot;) # exc_type below is ignored on 3.5 and later print(repr(traceback.format_exception(exc_type, exc_value, exc_traceback))) print(&quot; n***** extract_tb *****&quot;) print(repr(traceback.extract_tb(exc_traceback))) print(&quot; n***** format_tb *****&quot;) print(repr(traceback.format_tb(exc_traceback))) print(&quot; n***** tb_lineno *****&quot;, exc_traceback.tb_lineno) . ***** Exception ***** object of type &#39;int&#39; has no len() ***** print_tb ***** File &#34;&lt;ipython-input-5-b26b26250753&gt;&#34;, line 4, in &lt;module&gt; get_items_len(data) ***** print_exception ***** Traceback (most recent call last): File &#34;&lt;ipython-input-5-b26b26250753&gt;&#34;, line 4, in &lt;module&gt; get_items_len(data) File &#34;&lt;ipython-input-3-8421f841ba77&gt;&#34;, line 11, in get_items_len items_len.append(len(i)) TypeError: object of type &#39;int&#39; has no len() ***** print_exc ***** Traceback (most recent call last): File &#34;&lt;ipython-input-5-b26b26250753&gt;&#34;, line 4, in &lt;module&gt; get_items_len(data) File &#34;&lt;ipython-input-3-8421f841ba77&gt;&#34;, line 11, in get_items_len items_len.append(len(i)) TypeError: object of type &#39;int&#39; has no len() ***** format_exc, first and last line ***** Traceback (most recent call last): TypeError: object of type &#39;int&#39; has no len() ***** format_exception ***** [&#39;Traceback (most recent call last): n&#39;, &#39; File &#34;&lt;ipython-input-5-b26b26250753&gt;&#34;, line 4, in &lt;module&gt; n get_items_len(data) n&#39;, &#39; File &#34;&lt;ipython-input-3-8421f841ba77&gt;&#34;, line 11, in get_items_len n items_len.append(len(i)) n&#39;, &#34;TypeError: object of type &#39;int&#39; has no len() n&#34;] ***** extract_tb ***** [&lt;FrameSummary file &lt;ipython-input-5-b26b26250753&gt;, line 4 in &lt;module&gt;&gt;, &lt;FrameSummary file &lt;ipython-input-3-8421f841ba77&gt;, line 11 in get_items_len&gt;] ***** format_tb ***** [&#39; File &#34;&lt;ipython-input-5-b26b26250753&gt;&#34;, line 4, in &lt;module&gt; n get_items_len(data) n&#39;, &#39; File &#34;&lt;ipython-input-3-8421f841ba77&gt;&#34;, line 11, in get_items_len n items_len.append(len(i)) n&#39;] ***** tb_lineno ***** 4 . . All these methods are useful but we are still short on information about the state of local variables when the system crashed. Before writing our custom function to get variable state, let us spend some time to understand the working of Traceback object. . Traceback Module . https://docs.python.org/3/library/traceback.html This module provides an easy-to-use interface to work with traceback objects. It provides multiple functions that we can use to extract the required information from traceback. So far, we have used methods from this module in the above examples. . Traceback Objects . https://docs.python.org/3/reference/datamodel.html &gt; On this page search for term &quot;Traceback objects&quot; . Traceback objects represent a stack trace of an exception. A traceback object is implicitly created when an exception occurs and may also be explicitly created by initializing an instance of class types.TracebackType. traceback object is also an instance of types.TracebackType class. When an exception occurs, a traceback object is initialized for us, and we can obtain it from any of the following two methods. . It is available as a third item of the tuple returned by sys.exc_info() &quot;(type, value, traceback)&quot; | It is available as the __traceback__ object of the caught exception. &quot;Exception.__traceback__&quot; | A traceback object is a linked list of nodes, where each node is a Frame object. Frame objects form their own linked list but in the opposite direction of traceback objects. Together they work like a doubly-linked list, and we can use them to move back and forth in the stack trace history. It is the frame objects that hold all the stack&#39;s important information. traceback object has some special attributes . tb_next point to the next level in the stack trace (towards the frame where the exception occurred), or None if there is no next level | tb_frame points to the execution frame of the current level | tb_lineno gives the line number where the exception occurred | . # method 1: get traceback object using sys.exc_info() try: get_items_len(data) except Exception as e: print(sys.exc_info()[2]) . &lt;traceback object at 0x7fd01545fb00&gt; . # method 2: get traceback object using Exception.__traceback__ try: get_items_len(data) except Exception as e: print(e.__traceback__ ) . &lt;traceback object at 0x7fd01548f700&gt; . If there is no exception in the system, then calling sys.exc_info() will only return None values. . # no exception is generated so sys.exc_info() will return None values. try: get_items_len([&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;]) except Exception as e: print(sys.exc_info()[2]) . Frame Objects . https://docs.python.org/3/reference/datamodel.html &gt; On this page search for term &quot;Frame objects&quot; . Frame objects represent execution frames. It has some special attributes . f_back is a reference to the previous stack frame (towards the caller), or None if this is the bottom stack frame | f_code is the code object being executed in this frame. We will discuss Code Objects in next the section | f_lineno is the current line number of the frame — writing to this from within a trace function jumps to the given line (only for the bottom-most frame). A debugger can implement a Jump command (aka Set Next Statement) by writing to f_lineno. This attribute will give you the line number in the code on which exception occurred | f_locals is a dictionary used to lookup local variables. From this dictionary we can get all the local variables and their state at the time of exception | f_globals is a dictionary for global varaibles | . Code Objects . https://docs.python.org/3/reference/datamodel.html &gt; On this page search for term &quot;Code Objects&quot; . Code objects represent byte-compiled executable Python code or bytecode. Some of its attributes include . co_name gives the function name being executed | co_filename gives the filename from which the code was compiled | . There are many other helpful attributes in this object, and you may read about them from the docs. . Visual representation of Traceback, Frame and Code Objects . Custom fuction for additional exception info . Now with this additional information on stack trace objects, let us create a function to get variables state at the time of exception. . def exc_info_plus(): &quot;&quot;&quot; Provides the usual traceback information, followed by a listing of all the local variables in each frame. &quot;&quot;&quot; tb = sys.exc_info()[2] # iterate forward to the last (most recent) traceback object. while 1: if not tb.tb_next: break tb = tb.tb_next stack = [] # get the most recent traceback frame f = tb.tb_frame # iterate backwards from recent to oldest traceback frame while f: stack.append(f) f = f.f_back # oldest frame is at the top. reverse it to get the most recent frame at the top. stack.reverse() # get exception information and stack trace entries from most recent traceback object exc_msg = traceback.format_exc() exc_msg += &quot; n*** Locals by frame, innermost last ***&quot; for frame in stack: exc_msg += f&quot; nFrame {frame.f_code.co_name} in {frame.f_code.co_filename} at line {frame.f_lineno}&quot; for key, value in frame.f_locals.items(): exc_msg += f&quot; n t {key:20} = &quot; try: data = str(value) # limit variable&#39;s output to a certain number. You can adjust it as per your requirement. # But not to remove it as output from large objects (e.g. Pandas DataFrame) can be troublesome. output_limit = 50 exc_msg += (data[:output_limit] + &quot;...&quot;) if len(data) &gt; output_limit else data except: exc_msg += &quot;&lt;ERROR WHILE PRINTING VALUE&gt;&quot; return exc_msg . . #now let us try our custom exception function and see the ouput try: get_items_len(data) except Exception as e: print(exc_info_plus()) . Traceback (most recent call last): File &#34;&lt;ipython-input-10-521618c72821&gt;&#34;, line 4, in &lt;module&gt; get_items_len(data) File &#34;&lt;ipython-input-3-8421f841ba77&gt;&#34;, line 11, in get_items_len items_len.append(len(i)) TypeError: object of type &#39;int&#39; has no len() *** Locals by frame, innermost last *** Frame _run_module_as_main in /usr/lib/python3.8/runpy.py at line 194 mod_name = ipykernel_launcher alter_argv = 1 mod_spec = ModuleSpec(name=&#39;ipykernel_launcher&#39;, loader=&lt;_fro... code = &lt;code object &lt;module&gt; at 0x7fd01c7fe030, file &#34;/us... main_globals = {&#39;__name__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: &#39;Entry point f... Frame _run_code in /usr/lib/python3.8/runpy.py at line 87 code = &lt;code object &lt;module&gt; at 0x7fd01c7fe030, file &#34;/us... run_globals = {&#39;__name__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: &#39;Entry point f... init_globals = None mod_name = __main__ mod_spec = ModuleSpec(name=&#39;ipykernel_launcher&#39;, loader=&lt;_fro... pkg_name = script_name = None loader = &lt;_frozen_importlib_external.SourceFileLoader objec... fname = /usr/local/lib/python3.8/dist-packages/ipykernel_l... cached = /usr/local/lib/python3.8/dist-packages/__pycache__... Frame &lt;module&gt; in /usr/local/lib/python3.8/dist-packages/ipykernel_launcher.py at line 16 __name__ = __main__ __doc__ = Entry point for launching an IPython kernel. This... __package__ = __loader__ = &lt;_frozen_importlib_external.SourceFileLoader objec... __spec__ = ModuleSpec(name=&#39;ipykernel_launcher&#39;, loader=&lt;_fro... __annotations__ = {} __builtins__ = &lt;module &#39;builtins&#39; (built-in)&gt; __file__ = /usr/local/lib/python3.8/dist-packages/ipykernel_l... __cached__ = /usr/local/lib/python3.8/dist-packages/__pycache__... sys = &lt;module &#39;sys&#39; (built-in)&gt; app = &lt;module &#39;ipykernel.kernelapp&#39; from &#39;/usr/local/lib... Frame launch_instance in /usr/local/lib/python3.8/dist-packages/traitlets/config/application.py at line 845 cls = &lt;class &#39;ipykernel.kernelapp.IPKernelApp&#39;&gt; argv = None kwargs = {} app = &lt;ipykernel.kernelapp.IPKernelApp object at 0x7fd01... Frame start in /usr/local/lib/python3.8/dist-packages/ipykernel/kernelapp.py at line 612 self = &lt;ipykernel.kernelapp.IPKernelApp object at 0x7fd01... Frame start in /usr/local/lib/python3.8/dist-packages/tornado/platform/asyncio.py at line 199 self = &lt;tornado.platform.asyncio.AsyncIOMainLoop object a... old_loop = &lt;_UnixSelectorEventLoop running=True closed=False ... Frame run_forever in /usr/lib/python3.8/asyncio/base_events.py at line 570 self = &lt;_UnixSelectorEventLoop running=True closed=False ... old_agen_hooks = asyncgen_hooks(firstiter=None, finalizer=None) Frame _run_once in /usr/lib/python3.8/asyncio/base_events.py at line 1859 self = &lt;_UnixSelectorEventLoop running=True closed=False ... sched_count = 0 handle = &lt;Handle IOLoop.add_future.&lt;locals&gt;.&lt;lambda&gt;(&lt;Futur... timeout = 0 event_list = [] end_time = 102299.21219400101 ntodo = 2 i = 0 Frame _run in /usr/lib/python3.8/asyncio/events.py at line 81 self = &lt;Handle IOLoop.add_future.&lt;locals&gt;.&lt;lambda&gt;(&lt;Futur... Frame &lt;lambda&gt; in /usr/local/lib/python3.8/dist-packages/tornado/ioloop.py at line 688 f = &lt;Future finished result=(10, 13, &lt;bound method...7... callback = &lt;function Runner.handle_yield.&lt;locals&gt;.inner at 0x... future = &lt;Future finished result=(10, 13, &lt;bound method...7... self = &lt;tornado.platform.asyncio.AsyncIOMainLoop object a... Frame _run_callback in /usr/local/lib/python3.8/dist-packages/tornado/ioloop.py at line 741 self = &lt;tornado.platform.asyncio.AsyncIOMainLoop object a... callback = functools.partial(&lt;function Runner.handle_yield.&lt;l... Frame inner in /usr/local/lib/python3.8/dist-packages/tornado/gen.py at line 814 f = None self = &lt;tornado.gen.Runner object at 0x7fd015493820&gt; Frame run in /usr/local/lib/python3.8/dist-packages/tornado/gen.py at line 775 self = &lt;tornado.gen.Runner object at 0x7fd015493820&gt; future = None exc_info = None value = (10, 13, &lt;bound method Kernel.dispatch_shell of &lt;i... Frame process_one in /usr/local/lib/python3.8/dist-packages/ipykernel/kernelbase.py at line 362 self = &lt;ipykernel.ipkernel.IPythonKernel object at 0x7fd0... wait = True priority = 10 t = 13 dispatch = &lt;bound method Kernel.dispatch_shell of &lt;ipykernel.... args = (&lt;zmq.eventloop.zmqstream.ZMQStream object at 0x7f... Frame wrapper in /usr/local/lib/python3.8/dist-packages/tornado/gen.py at line 234 args = (&lt;ipykernel.ipkernel.IPythonKernel object at 0x7fd... kwargs = {} future = &lt;Future pending&gt; ctx_run = &lt;built-in method run of Context object at 0x7fd015... result = &lt;generator object Kernel.dispatch_shell at 0x7fd01... func = &lt;function Kernel.dispatch_shell at 0x7fd018dc73a0&gt; Frame dispatch_shell in /usr/local/lib/python3.8/dist-packages/ipykernel/kernelbase.py at line 265 self = &lt;ipykernel.ipkernel.IPythonKernel object at 0x7fd0... stream = &lt;zmq.eventloop.zmqstream.ZMQStream object at 0x7fd... msg = {&#39;header&#39;: {&#39;msg_id&#39;: &#39;24c6f063a6074761b147921bd32... idents = [b&#39;c22ba404ebb740b881ba75b5855dc8cc&#39;] msg_type = execute_request handler = &lt;bound method Kernel.execute_request of &lt;ipykernel... Frame wrapper in /usr/local/lib/python3.8/dist-packages/tornado/gen.py at line 234 args = (&lt;ipykernel.ipkernel.IPythonKernel object at 0x7fd... kwargs = {} future = &lt;Future pending&gt; ctx_run = &lt;built-in method run of Context object at 0x7fd015... result = &lt;generator object Kernel.execute_request at 0x7fd0... func = &lt;function Kernel.execute_request at 0x7fd018dc7f70... Frame execute_request in /usr/local/lib/python3.8/dist-packages/ipykernel/kernelbase.py at line 540 self = &lt;ipykernel.ipkernel.IPythonKernel object at 0x7fd0... stream = &lt;zmq.eventloop.zmqstream.ZMQStream object at 0x7fd... ident = [b&#39;c22ba404ebb740b881ba75b5855dc8cc&#39;] parent = {&#39;header&#39;: {&#39;msg_id&#39;: &#39;24c6f063a6074761b147921bd32... content = {&#39;code&#39;: &#39;#collapse-output n#now let uss try our c... code = #collapse-output #now let uss try our custom excep... silent = False store_history = True user_expressions = {} allow_stdin = True stop_on_error = True metadata = {&#39;started&#39;: datetime.datetime(2022, 2, 13, 19, 0, ... Frame wrapper in /usr/local/lib/python3.8/dist-packages/tornado/gen.py at line 234 args = (&lt;ipykernel.ipkernel.IPythonKernel object at 0x7fd... kwargs = {} future = &lt;Future pending&gt; ctx_run = &lt;built-in method run of Context object at 0x7fd018... result = &lt;generator object IPythonKernel.do_execute at 0x7f... func = &lt;function IPythonKernel.do_execute at 0x7fd018d178... Frame do_execute in /usr/local/lib/python3.8/dist-packages/ipykernel/ipkernel.py at line 302 self = &lt;ipykernel.ipkernel.IPythonKernel object at 0x7fd0... code = #collapse-output #now let uss try our custom excep... silent = False store_history = True user_expressions = {} allow_stdin = True reply_content = {} run_cell = &lt;bound method InteractiveShell.run_cell_async of &lt;... should_run_async = &lt;bound method InteractiveShell.should_run_async of... shell = &lt;ipykernel.zmqshell.ZMQInteractiveShell object at ... Frame run_cell in /usr/local/lib/python3.8/dist-packages/ipykernel/zmqshell.py at line 539 self = &lt;ipykernel.zmqshell.ZMQInteractiveShell object at ... args = (&#39;#collapse-output n#now let uss try our custom ex... kwargs = {&#39;store_history&#39;: True, &#39;silent&#39;: False} __class__ = &lt;class &#39;ipykernel.zmqshell.ZMQInteractiveShell&#39;&gt; Frame run_cell in /usr/local/lib/python3.8/dist-packages/IPython/core/interactiveshell.py at line 2877 self = &lt;ipykernel.zmqshell.ZMQInteractiveShell object at ... raw_cell = #collapse-output #now let uss try our custom excep... store_history = True silent = False shell_futures = True result = None Frame _run_cell in /usr/local/lib/python3.8/dist-packages/IPython/core/interactiveshell.py at line 2923 self = &lt;ipykernel.zmqshell.ZMQInteractiveShell object at ... raw_cell = #collapse-output #now let uss try our custom excep... store_history = True silent = False shell_futures = True preprocessing_exc_tuple = None transformed_cell = #collapse-output #now let uss try our custom excep... coro = &lt;coroutine object InteractiveShell.run_cell_async ... runner = &lt;function _pseudo_sync_runner at 0x7fd01bb3b040&gt; Frame _pseudo_sync_runner in /usr/local/lib/python3.8/dist-packages/IPython/core/async_helpers.py at line 68 coro = &lt;coroutine object InteractiveShell.run_cell_async ... Frame run_cell_async in /usr/local/lib/python3.8/dist-packages/IPython/core/interactiveshell.py at line 3146 raw_cell = #collapse-output #now let uss try our custom excep... silent = False shell_futures = True transformed_cell = #collapse-output #now let uss try our custom excep... preprocessing_exc_tuple = None info = &lt;ExecutionInfo object at 7fd015498ac0, raw_cell=&#34;#... error_before_exec = &lt;function InteractiveShell.run_cell_async.&lt;locals&gt;... cell = #collapse-output #now let uss try our custom excep... compiler = &lt;IPython.core.compilerop.CachingCompiler object at... _run_async = False cell_name = &lt;ipython-input-10-521618c72821&gt; code_ast = &lt;_ast.Module object at 0x7fd0154989a0&gt; interactivity = last_expr result = &lt;ExecutionResult object at 7fd015498a90, execution... self = &lt;ipykernel.zmqshell.ZMQInteractiveShell object at ... store_history = True Frame run_ast_nodes in /usr/local/lib/python3.8/dist-packages/IPython/core/interactiveshell.py at line 3338 self = &lt;ipykernel.zmqshell.ZMQInteractiveShell object at ... nodelist = [&lt;_ast.Try object at 0x7fd015498cd0&gt;] cell_name = &lt;ipython-input-10-521618c72821&gt; interactivity = none compiler = &lt;IPython.core.compilerop.CachingCompiler object at... result = &lt;ExecutionResult object at 7fd015498a90, execution... to_run_exec = [&lt;_ast.Try object at 0x7fd015498cd0&gt;] to_run_interactive = [] mod = &lt;_ast.Module object at 0x7fd015448910&gt; compare = &lt;function InteractiveShell.run_ast_nodes.&lt;locals&gt;.... to_run = [(&lt;_ast.Try object at 0x7fd015498cd0&gt;, &#39;exec&#39;)] node = &lt;_ast.Try object at 0x7fd015498cd0&gt; mode = exec code = &lt;code object &lt;module&gt; at 0x7fd0154aef50, file &#34;&lt;ip... asy = False _async = False Frame run_code in /usr/local/lib/python3.8/dist-packages/IPython/core/interactiveshell.py at line 3418 self = &lt;ipykernel.zmqshell.ZMQInteractiveShell object at ... code_obj = &lt;code object &lt;module&gt; at 0x7fd0154aef50, file &#34;&lt;ip... result = &lt;ExecutionResult object at 7fd015498a90, execution... async_ = False __tracebackhide__ = __ipython_bottom__ old_excepthook = &lt;bound method IPKernelApp.excepthook of &lt;ipykernel... outflag = True Frame &lt;module&gt; in &lt;ipython-input-10-521618c72821&gt; at line 6 __name__ = __main__ __doc__ = Automatically created module for IPython interacti... __package__ = None __loader__ = None __spec__ = None __builtin__ = &lt;module &#39;builtins&#39; (built-in)&gt; __builtins__ = &lt;module &#39;builtins&#39; (built-in)&gt; _ih = [&#39;&#39;, &#39;#collapse-hide nfrom platform import python_... _oh = {} _dh = [&#39;/data/_notebooks&#39;] In = [&#39;&#39;, &#39;#collapse-hide nfrom platform import python_... Out = {} get_ipython = &lt;bound method InteractiveShell.get_ipython of &lt;ipy... exit = &lt;IPython.core.autocall.ZMQExitAutocall object at 0... quit = &lt;IPython.core.autocall.ZMQExitAutocall object at 0... _ = __ = ___ = _i = #collapse-show def exc_info_plus(): &#34;&#34;&#34; Pr... _ii = ## # no exception is generated so sys.exc_info() w... _iii = ## # method 2: get traceback object using Exceptio... _i1 = #collapse-hide from platform import python_version... python_version = &lt;function python_version at 0x7fd01c439430&gt; _i2 = #collapse-hide # this is intentionally hidden as w... data = [&#39;1&#39;, &#39;22&#39;, 333, &#39;4444&#39;] _i3 = ## # our toy example function. import sys, traceba... sys = &lt;module &#39;sys&#39; (built-in)&gt; traceback = &lt;module &#39;traceback&#39; from &#39;/usr/lib/python3.8/trace... get_items_len = &lt;function get_items_len at 0x7fd0154ab310&gt; _i4 = ## # let&#39;s run our function on &#34;data&#34; received fro... _i5 = #collapse-output # calling traceback module built-... exc_type = &lt;class &#39;TypeError&#39;&gt; exc_value = object of type &#39;int&#39; has no len() exc_traceback = &lt;traceback object at 0x7fd01544e5c0&gt; formatted_lines = [&#39;Traceback (most recent call last):&#39;, &#39; File &#34;&lt;i... _i6 = ## # method 1: get traceback object using sys.exc_... _i7 = ## # method 2: get traceback object using Exceptio... _i8 = ## # no exception is generated so sys.exc_info() w... _i9 = #collapse-show def exc_info_plus(): &#34;&#34;&#34; Pr... exc_info_plus = &lt;function exc_info_plus at 0x7fd0154ab790&gt; _i10 = #collapse-output #now let uss try our custom excep... e = object of type &#39;int&#39; has no len() Frame get_items_len in &lt;ipython-input-3-8421f841ba77&gt; at line 11 items = [&#39;1&#39;, &#39;22&#39;, 333, &#39;4444&#39;] items_len = [1, 2] i = 333 . . Note the last three lines in the above stack trace. It is easy now to see (items) that we received in our function. The item at index i is also available (333) on which our function crashed. Using our custom function unexpected errors are logged in a format that makes it a lot easier to find and fix the errors. Let&#39;s fix our function to handle unexpected integer values. . # let&#39;s fix our function to handle unexpected &#39;int&#39; items by converting them to &#39;str&#39; def get_items_len(items: list) -&gt; list: &quot;&quot;&quot; this function returns the length of items received in a list. &quot;&quot;&quot; items_len = [] for i in map(str, items): items_len.append(len(i)) return items_len # test it again get_items_len(data) . [1, 2, 3, 4] .",
            "url": "https://hassaanbinaslam.github.io/myblog/python/2022/02/11/python-stack-traceback-more-info.html",
            "relUrl": "/python/2022/02/11/python-stack-traceback-more-info.html",
            "date": " • Feb 11, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Python Dictionary - Multiple ways to get items",
            "content": "About . This notebook demonstrates multiple ways to get items from a Python dictionary. . Environment Details . from platform import python_version print(&quot;python==&quot; + python_version()) . . python==3.8.5 . Example Dictionaries . # simple dictionary car = { &quot;brand&quot;: &quot;ford&quot;, &quot;model&quot;: &quot;mustang&quot; } car . {&#39;brand&#39;: &#39;ford&#39;, &#39;model&#39;: &#39;mustang&#39;} . # nested dictionary family = { &#39;gfather&#39; : { &#39;father&#39;: { &#39;son&#39;: {&#39;love&#39;:&#39;python&#39;} } } } family . {&#39;gfather&#39;: {&#39;father&#39;: {&#39;son&#39;: {&#39;love&#39;: &#39;python&#39;}}}} . Method 1: Square brackets . A square bracket is the simplest approach to getting any item from a dictionary. You can get a value from a dictionary by providing it a key in [] brackets. For example, to get a value of model from a car . car[&#39;model&#39;] . &#39;mustang&#39; . Problem with this approach is that if the provided key is not available in the dictionary then it will throw a KeyError exception. . car[&#39;year&#39;] . KeyErrorTraceback (most recent call last) &lt;ipython-input-5-ca220af55913&gt; in &lt;module&gt; -&gt; 1 car[&#39;year&#39;] KeyError: &#39;year&#39; . To avoid KeyError, you can first check if the key is available in dictionary. . if &#39;year&#39; in car: # check if given key is available in dictionary year = car[&#39;year&#39;] # now get the value else: year = &#39;1964&#39; # (Optional) otherwise give this car a default value year . &#39;1964&#39; . An alternate approach could be to use a Try-Except block to handle the KeyError exception. . try: year = car[&#39;year&#39;] except KeyError: year = &#39;1964&#39; # give this car a default value year . &#39;1964&#39; . For nested dictionaries, you can use chained [] brackets. But beware that if any of the Keys is missing in the chain, you will get a KeyError exception. . # this will work. All keys are present. family[&#39;gfather&#39;][&#39;father&#39;][&#39;son&#39;] . {&#39;love&#39;: &#39;python&#39;} . # this will not work. &#39;mother&#39; key is not in dictionary family[&#39;gfather&#39;][&#39;mother&#39;][&#39;son&#39;] . KeyErrorTraceback (most recent call last) &lt;ipython-input-9-3d615db6bfdf&gt; in &lt;module&gt; 1 # this will not work. &#39;mother&#39; key is not in dictionary -&gt; 2 family[&#39;gfather&#39;][&#39;mother&#39;][&#39;son&#39;] KeyError: &#39;mother&#39; . Method 2: Get function . https://docs.python.org/3/library/stdtypes.html#dict.get &gt; get(key[, default]) . Get function will return the value for key if key is in the dictionary. Otherwise, it will return a default value which is None. You can provide your default value as well. . year = car.get(&#39;year&#39;, &#39;1964&#39;) year # year key is not present so get function will return a default value &#39;1964&#39; . &#39;1964&#39; . Depending on your use case there can be confusion with this approach when your item can also have None value. In that case, you will not know whether the None value was returned from the dictionary or it was the Get function. . owner = car.get(&#39;owner&#39;) owner # owner has a None value. But is this value coming from dic or from Get function? # This can be confusing for large nested dictionaries. . For nested dictionaries you can use chained Get functions. But beware that missing Key items needs to be properly handled otherwise you will still get an exception. . # this will work. All keys are present. family.get(&#39;gfather&#39;).get(&#39;father&#39;).get(&#39;son&#39;) . {&#39;love&#39;: &#39;python&#39;} . # this will still work. &#39;daughter&#39; key is missing # but since it is at the end of chain it will return a default None value family.get(&#39;gfather&#39;).get(&#39;father&#39;).get(&#39;daughter&#39;) . # this will NOT work. &#39;mother&#39; key is missing and it returned a default None value. # but since it is not at the end, and we called Get function on returned value &#39;None&#39; family.get(&#39;gfather&#39;).get(&#39;mother&#39;).get(&#39;son&#39;) . AttributeErrorTraceback (most recent call last) &lt;ipython-input-14-a35a8f091991&gt; in &lt;module&gt; 1 # this will NOT work. &#39;mother&#39; key is missing and it returned a default None value. 2 # but since it is not at the end, and we called Get function on returned value &#39;None&#39; -&gt; 3 family.get(&#39;gfather&#39;).get(&#39;mother&#39;).get(&#39;son&#39;) AttributeError: &#39;NoneType&#39; object has no attribute &#39;get&#39; . # this will work. &#39;mother&#39; key is missing and it returned a default value. # but we have properly handled all the default values with empty dictionaries. family.get(&#39;gfather&#39;, {}).get(&#39;mother&#39;, {}).get(&#39;son&#39;, {}) . {} .",
            "url": "https://hassaanbinaslam.github.io/myblog/python/2022/02/10/python-dictionary.html",
            "relUrl": "/python/2022/02/10/python-dictionary.html",
            "date": " • Feb 10, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "My First Blog Post from Jupyter Notebook",
            "content": "Well, this is my first post using Jupyter notebook as a publishing medium. Besides this notebook, I am also using &#39;nbdev&#39; library from FastAI as tooling to convert notebooks into static HTML pages. Once pushed to GitHub they will become new posts on my blog. I need to learn more about this setup, but it is looking very interesting. . # I can also include some code directly into the blog post. No need for GitHub snippets. print(&quot;nbdev and fastpages from Fast.AI are so cool! &quot;) . . nbdev and fastpages from Fast.AI are so cool! .",
            "url": "https://hassaanbinaslam.github.io/myblog/jupyter/fastpages/2022/02/10/hello-world.html",
            "relUrl": "/jupyter/fastpages/2022/02/10/hello-world.html",
            "date": " • Feb 10, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://hassaanbinaslam.github.io/myblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://hassaanbinaslam.github.io/myblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://hassaanbinaslam.github.io/myblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://hassaanbinaslam.github.io/myblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}